<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2015.1 (Build 429U)" ts="2015-05-05 17:33:51">
<Routine name="cmql249query" type="INT" languagemode="0" generated="1" timestamp="63660,31915.715326"><![CDATA[
runQuery New pass,count,counted,level,plevel,brkLev,resultSet,missingKey,searchID,savingCount,lo,selected,attrVal,vals,curval,v,atRecord,ID,SQLCODE,cmv,csv,inStr,inVal,item,more,outStr
   Set $ZTrap="earlyExit" Do $Zu(24,17) Set resultSet("Command") = %mvp(1)
    ;---&sql( DECLARE C1 CURSOR FOR
     ;---          SELECT
     ;---            T0.ID,
     ;---            T0.COL1,
     ;---            T0.COL2
     ;---          INTO
     ;---            :ID,
     ;---            :resultSet("Data", 1),
     ;---            :resultSet("Data", 2)
     ;---            FROM MV.T0
     ;---          ORDER BY %SQLSTRING(T0.ITEMID) 
     ;---       )   ; Generated by the Judicious Inquiry Machine MK4
     ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, ID, SQLCODE, resultSet
      ; Generated by the Judicious Inquiry Machine MK4
   Set resultSet("Outputs", "Columns", 0, "name")     = "@ID"    ; Original dictionary name
   Set resultSet("Outputs", "Columns", 0, "heading")  = "SETTINGS"    ; Heading for the column
   Set resultSet("Outputs", "Columns", 0, "mv")       = "0"    ; Multivalue indicator
   Set resultSet("Outputs", "Columns", 0, "control")  = "N"    ; Fat Controller?
   Set resultSet("Outputs", "Columns", 0, "width")    =  10    ; Display width as per dict entry
   Set resultSet("Outputs", "Columns", 0, "breakSup")  = "N"    ; hide column
   Set resultSet("Outputs", "Columns", 0, "hiddenInternal")  = "N"    ; hidden column
   Set resultSet("Outputs", "Columns", 0, "justification") = "L"    ; Justification as per display column
   Set resultSet("Outputs", "Columns", 1, "name")     = "DESCRIPTION"    ; Original dictionary name
   Set resultSet("Outputs", "Columns", 1, "heading")  = "Description"    ; Heading for the column
   Set resultSet("Outputs", "Columns", 1, "mv")       = "0"    ; Multivalue indicator
   Set resultSet("Outputs", "Columns", 1, "control")  = "N"    ; Fat Controller?
   Set resultSet("Outputs", "Columns", 1, "width")    =  60    ; Display width as per dict entry
   Set resultSet("Outputs", "Columns", 1, "breakSup")  = "N"    ; hide column
   Set resultSet("Outputs", "Columns", 1, "hiddenInternal")  = "N"    ; hidden column
   Set resultSet("Outputs", "Columns", 1, "justification") = "T"    ; Justification as per display column
   Set resultSet("Outputs", "Columns", 2, "name")     = "VALUE"    ; Original dictionary name
   Set resultSet("Outputs", "Columns", 2, "heading")  = "Value"    ; Heading for the column
   Set resultSet("Outputs", "Columns", 2, "mv")       = "0"    ; Multivalue indicator
   Set resultSet("Outputs", "Columns", 2, "control")  = "N"    ; Fat Controller?
   Set resultSet("Outputs", "Columns", 2, "width")    =  20    ; Display width as per dict entry
   Set resultSet("Outputs", "Columns", 2, "breakSup")  = "N"    ; hide column
   Set resultSet("Outputs", "Columns", 2, "hiddenInternal")  = "N"    ; hidden column
   Set resultSet("Outputs", "Columns", 2, "justification") = "L"    ; Justification as per display column
   Do LIST^%SYS.MVQ(-1, .resultSet)   ; Init column widths and so on
    ;---&sql(OPEN C1)
     ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
   Do %C10o
   If (SQLCODE '=0)
   {
       MVC "Unable to open SQL cursor for the query!",!
       goto earlyExit
   }
   Set pass=1, count= 0, counted= 0, $mvv(157)=1, $mvv(158)=1 , $mvnb=0  ; Counts @ND and @NI ,@NB
    ;---&sql(FETCH C1)
     ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
   Do %0Do
    Set brkLev = 0, resultSet("Aggregates", "@ND", 0) = 0
   While (SQLCODE = 0) {
      Set counted = counted + 1, $mvnb=0  ; Track @NI, @NB
        Set resultSet("Display", 0) = ID  ; Just a copy of the Item ID
        Set resultSet("Display", 1) = resultSet("Data", 1)
        Set resultSet("Display", 2) = resultSet("Data", 2)
       Do:pass>0 LIST^%SYS.MVQ(0, .resultSet)   ; Call the list processor
       Set:pass>0 $mvv(158)=$mvv(158)+1
      Set resultSet("Aggregates", "@ND", 0) = resultSet("Aggregates", "@ND", 0) + 1  ; @ND (Detail lines since last break)
      Set $mvnb=0
       ;---&sql(FETCH C1)
        ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
      Do %0Eo
      Set count = count + 1
   }
   If SQLCODE, SQLCODE'=100 {
      If %msg["<INTERRUPT>"  {
          Do addMVerr^%SYS.MV(881, 0)
      } else {
          MVC "An internal CMQL/SQL error occurred!",!
          MVC "SQLCODE=",SQLCODE,": ",$SYSTEM.SQL.SQLCODE(SQLCODE),!
          MVC %msg,!
      }
      Set $mvv(209)  = 0 
       ;---&sql(CLOSE C1)
        ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
      Do %C10c
	  Kill %globalName, %fileObj, ^||%MV.CMQL.DIR
      Quit
   }
    ;---&sql(CLOSE C1)
     ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
   Do %C10c
   Set resultSet("Count") = counted
   Do LIST^%SYS.MVQ(-2, .resultSet)   ; Call the processor to clean up after itself
   Kill resultSet   ; No longer required
   Set $mvv(209)  = 0       ; Throw away any preceeding lists
   Kill %globalName, %fileObj, %MVstarsline,^||%MV.CMQL.DIR
   Quit
rollAggregates(plevel)
   Set level=plevel, $mvnv=1, $mvns=1
   Set:plevel=255 level=0, $mvnb=255 ; Force grand totals, set @NB to default
    Set resultSet("Aggregates", "@ND", brkLev) = 0
   Do:plevel=255 LIST^%SYS.MVQ(255, .resultSet) ; grand totals
   Set $mvv(157) = 1
   Quit
  /* Table and Column definitions
   Do MVCRT^%qatmv("T0", globalName,50000) 
   Do MVCRF^%qatmv("T0", "COL1", "", "", "1", "$c(254)", "", "SQLSTRING(150)")
   Do MVCRF^%qatmv("T0", "COL2", "", "", "2", "$c(254)", "", "SQLSTRING(150)")
  */
earlyExit  ;---&sql(CLOSE C1)
  ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
 Do %C10c
   Set $mvv(209)=0 ; Tell the shell to throw the list away and exit the query before total completion
   ZT:$ZE["<MV WRAPUP>" $ZE
   ZT:$ZE["<EXTERNAL INTERRUPT>" $ZE
   ZT:$ZE["<INTERRUPT>" $ZE
   W "earlyExit, $ZERROR =",$ZERROR,!
 q
%C10o 
 s $zt="%C10E" s SQLCODE=$s($g(%C102893c):-101,1:0) q:SQLCODE'=0  s %C102893d(1)=0 set:$d(%0CacheRowLimit)#2 %C102893d(2)=%0CacheRowLimit s %C102893d(3)=0,%C102893d(4)="" d:$zu(115,15) $system.ECP.Sync()
 s %C102893d(5)=$S($zu(115,12)=-1:0,$zu(115,12)>0:$zu(115,12),1:$zu(35,4))
 if %C102893d(5)>1 { 
      new StatsParams set StatsParams=0
      do ##class(%SYS.PTools.SQLStats).Init("EASYCSP",$zn,"C10",.StatsParams)
  }
 s %C102893t(1)=$i(^||%sql.temp)
 s %C102893c=1,SQLCODE=0 q
%C10E s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg) k %C102893c,%C102893d,%C102893E,%C102893l,%C102893n,%C102893R,%C102893s,%C102893t,%C102893Z,%mmmsqlEOO q
%0Afirst 
 k ^||%sql.temp(%C102893t(1)) s ^||%sql.temp(%C102893t(1))=$H_"^"_$ZN_"^"_$zu(67,6,$j)
 i $sortbegin(^||%sql.temp(%C102893t(1)))
 ; asl MOD# 3
 d:%C102893d(5)=3 ##class(%SYS.PTools.SQLStats).Start("EASYCSP",$zn,"C10",3)
 d %0AmBMod
 i $sortend(^||%sql.temp(%C102893t(1)))
 s %C102893d(6)=""
%0AmCk1 s %C102893d(6)=$o(^||%sql.temp(%C102893t(1),%C102893d(6)),1)
 i %C102893d(6)="" g %0AmCdun
 s %C102893d(7)=$s(%C102893d(6)=-1E14:"",1:%C102893d(6))
 s %C102893d(8)=""
%0AmCk2 s %C102893d(8)=$o(^||%sql.temp(%C102893t(1),%C102893d(6),%C102893d(8)),1,%C102893d(9))
 i %C102893d(8)="" g %0AmCk1
 s ID=$s(%C102893d(8)=-1E14:"",1:%C102893d(8))
 s resultSet("Data",1)=$lg(%C102893d(9),1) s resultSet("Data",2)=$lg(%C102893d(9),2)
 goto:$zu(115,2)=0 %0AmCuncommitted
 if $zu(115,2)=1 {
 	lock +^|"EASYCSP"|SETTINGS(ID)#"S":$zu(115,4)
 	if $t { set %C102893d(3)=$zu(68,7,0),%C102893d(4)=$name(^|"EASYCSP"|SETTINGS(ID))_"#""SI""" do:%C102893d(3) $zu(68,7,1) set %C102893d(3)=1 }
 	else { s SQLCODE=-114,%msg="Unable to acquire shared lock on table MV.T0 for RowID value: "_ID ztrap "LOCK"  }
 }
 ; asl MOD# 4
 d:%C102893d(5)=3 ##class(%SYS.PTools.SQLStats).Start("EASYCSP",$zn,"C10",4)
 s %C102893d(10)=$p(ID,"||")
 i ID'="",$d(^|"EASYCSP"|SETTINGS(ID))
 e  g %0AmDdun
 s %C102893d(7)=$zu(28,ID,8)
 s %C102893d(11)=$g(^|"EASYCSP"|SETTINGS(ID)) s resultSet("Data",1)=$p(%C102893d(11),$c(254),1) s resultSet("Data",2)=$p(%C102893d(11),$c(254),2)
%0AmCuncommitted ;
 d:%C102893d(5)=3 ##class(%SYS.PTools.SQLStats).Stop("EASYCSP",$zn,"C10","4,3,1")
 s:$g(SQLCODE)'<0 SQLCODE=0 s %C102893d(1)=%C102893d(1)+1,%ROWCOUNT=%C102893d(1),%ROWID=ID,%C102893c=10 q
%C10f i '$g(%C102893c) { s SQLCODE=-102 q  } i %C102893c=100 { s SQLCODE=100 q  } s SQLCODE=0
 s $zt="%0Aerr"
 i $d(%C102893d(2))#2,$g(%C102893d(1))'<%C102893d(2) { s SQLCODE=100,%ROWCOUNT=%C102893d(1),%C102893c=100 q }
 g %0Afirst:%C102893c=1
 d:%C102893d(5)=3 ##class(%SYS.PTools.SQLStats).Start("EASYCSP",$zn,"C10","4,3,1")
%0AmDdun if $zu(115,2)=1 { if $g(%C102893d(3))=1 { l -@%C102893d(4) s %C102893d(3)=0 } elseif $g(%C102893d(3))=2 { do $classmethod($li(%C102893d(4)),"%UnlockId",$li(%C102893d(4),2),1,1)  s %C102893d(3)=0 } }
 d:%C102893d(5)=3 ##class(%SYS.PTools.SQLStats).Stop("EASYCSP",$zn,"C10",4)
 g %0AmCk2
%0AmCdun d:%C102893d(5)=3 ##class(%SYS.PTools.SQLStats).Stop("EASYCSP",$zn,"C10",3)
%0AmAdun 
 s %ROWCOUNT=%C102893d(1),SQLCODE=100,%C102893c=100 q
%C10c i '$g(%C102893c) { s SQLCODE=-102 q  }
 s %ROWCOUNT=$s($g(SQLCODE)'<0:+$g(%C102893d(1)),1:0)
 n %sqlup f %sqlup=1 i $sortend(^||%sql.temp(%C102893t(%sqlup)),0)
 k ^||%sql.temp(%C102893t(1))
 d:$g(%C102893d(5))>1 ##class(%SYS.PTools.SQLStats).Report("EASYCSP",$zn,"C10",%ROWCOUNT)
 if $zu(115,2)=1 { if $g(%C102893d(3))=1 { l -@%C102893d(4) } elseif $g(%C102893d(3))=2 { do $classmethod($li(%C102893d(4)),"%UnlockId",$li(%C102893d(4),2),1,1)  } }
 k %C102893c,%C102893d,%C102893E,%C102893l,%C102893n,%C102893R,%C102893s,%C102893t,%C102893Z,%mmmsqlEOO s SQLCODE=0 q
%0Aerr s $zt="" d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 n %sqlup f %sqlup=1 i $sortend(^||%sql.temp(%C102893t(%sqlup)),0)
 s %C102893c=100 q
%0AmBMod ; asl MOD# 2
 d:%C102893d(5)=3 ##class(%SYS.PTools.SQLStats).Start("EASYCSP",$zn,"C10",2)
 s ID=""
%0AmBk1 s ID=$o(^|"EASYCSP"|SETTINGS(ID),1)
 i ID="" g %0AmBdun
 s %C102893d(7)=$zu(28,ID,8)
 s %C102893d(12)=$g(^|"EASYCSP"|SETTINGS(ID)) s resultSet("Data",1)=$p(%C102893d(12),$c(254),1) s resultSet("Data",2)=$p(%C102893d(12),$c(254),2)
 s %C102893d(6)=$s(%C102893d(7)'="":%C102893d(7),1:-1E14),%C102893d(8)=$s(ID'="":ID,1:-1E14),%C102893d(13)="",$li(%C102893d(13),1)=resultSet("Data",1),$li(%C102893d(13),2)=resultSet("Data",2),^||%sql.temp(%C102893t(1),%C102893d(6),%C102893d(8))=%C102893d(13)
 g %0AmBk1
%0AmBdun d:%C102893d(5)=3 ##class(%SYS.PTools.SQLStats).Stop("EASYCSP",$zn,"C10",2)
 q
%0Do d %C10f q:SQLCODE'=0
 q
%0Eo d %C10f q:SQLCODE'=0
 q
]]></Routine>
</Export>
